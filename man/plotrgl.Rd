% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/visualise_rgl.R
\name{plotrgl}
\alias{plotrgl}
\title{Plot atoms and bonds in 3D with rgl}
\usage{
plotrgl(
  atoms,
  bonds,
  col_bond_origin = "origin",
  col_bond_target = "target",
  col_atom_id = "eleno",
  col_atom_name = "elena",
  highlight = NULL,
  highlight_colour = "pink",
  col_atom_colour = col_atom_name,
  clear_scene = TRUE,
  colour_map_atom = element_colours,
  missing = "grey",
  strip_numbers = TRUE,
  bond_width = 2,
  axes = TRUE,
  bg3d = "black",
  colour_axis = "red",
  grid = FALSE,
  grid_n = 10,
  aspect = c(1, 1, 1)
)
}
\arguments{
\item{atoms}{Data frame of atoms with columns \code{x}, \code{y}, \code{z}, an ID column
(given by \code{col_atom_id}), and a name/element column (given by \code{col_atom_name}).}

\item{bonds}{Data frame of bonds with two columns that reference atom IDs:
origin (given by \code{col_bond_origin}) and target (given by \code{col_bond_target}).}

\item{col_bond_origin, }{col_bond_target Character scalars naming the bond
columns that reference atom IDs.}

\item{col_atom_id}{Character scalar naming the atom ID column in \code{atoms}.}

\item{col_atom_name}{Character scalar naming the atom element/name column in \code{atoms}.}

\item{highlight}{Optional selection of atoms to highlight. Supply values of
\code{col_atom_id} (e.g., numeric IDs) or a logical vector aligned with \code{atoms}.
When provided, these atoms are drawn using \code{highlight_colour}.}

\item{highlight_colour}{Single colour used for atoms in \code{highlight}; overrides
the normal colour mapping for those atoms (default: \code{"pink"}).}

\item{col_atom_colour}{Column name or vector used to assign atom colours.
Defaults to \code{col_atom_name}, which is mapped via \code{colour_map_atom}.}

\item{clear_scene}{Logical; if \code{TRUE}, clears the existing rgl scene first.}

\item{colour_map_atom}{Named character vector mapping element/name → colour
(e.g., Jmol-style colours). Used by \code{prepare_atoms_for_plotting()}.}

\item{strip_numbers}{Logical; if \code{TRUE}, digits are stripped from \code{col_atom_name}
before colour lookup (useful for labels like \code{"C12"} → \code{"C"}).}

\item{bond_width}{Numeric line width for bonds.}

\item{axes}{Logical; draw labelled axes box if \code{TRUE}.}

\item{bg3d}{Background colour passed to \code{rgl::bg3d()}. \strong{Note:} current
implementation sets black unconditionally.}

\item{colour_axis}{Axis and label colour.}

\item{grid}{Logical; draw orthogonal reference grids if \code{TRUE}.}

\item{grid_n}{Integer; number of grid lines per drawn axis when \code{grid = TRUE}.}

\item{aspect}{Numeric length-3 vector for aspect ratio. \strong{Note:} not used yet.}
}
\value{
Called for its side effects (renders to the rgl device); returns \code{NULL} invisibly.
}
\description{
Renders a simple ball–stick scene from atom and bond tables using \strong{rgl}.
Each atom is drawn as a sphere, and each bond as a segment connecting the
referenced atom coordinates.
}
\details{
Internally, bonds are enriched with atom coordinates via
\code{enrich_bonds_with_xyz_position()} and converted to an interleaved start/end
format by \code{to_interleaved()} (columns \verb{x,y,z} and \verb{xend,yend,zend} become
alternating rows suitable for \code{rgl::segments3d()}).
}
\examples{
\dontrun{
# Minimal toy example (two atoms connected by one bond)
atoms <- data.frame(
  eleno = c(1, 2),
  elena = c("C", "O"),
  x = c(0, 1), y = c(0, 0), z = c(0, 0)
)
bonds <- data.frame(origin = 1, target = 2)

plotrgl(
  atoms, bonds,
  col_atom_id = "eleno",
  col_atom_name = "elena",
  bond_width = 3,
  axes = TRUE, grid = TRUE
)
}

}
\seealso{
\code{\link[=to_interleaved]{to_interleaved()}}, \code{\link[=enrich_bonds_with_xyz_position]{enrich_bonds_with_xyz_position()}},
\code{\link[=prepare_atoms_for_plotting]{prepare_atoms_for_plotting()}}, and the \strong{rgl} functions
\code{\link[rgl:spheres]{rgl::spheres3d()}}, \code{\link[rgl:primitives]{rgl::segments3d()}}, \code{\link[rgl:axes3d]{rgl::axes3d()}}, \code{\link[rgl:grid3d]{rgl::grid3d()}}.
}
